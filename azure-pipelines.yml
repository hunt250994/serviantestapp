trigger: 
- master

stages:
  - stage: 'Build Test'
    displayName: 'Build and Test'
    variables: 
      GOVERSION: '1.16.2'   #This is the version of GO Lang
      CGO_ENABLED: '0'
      GOOS: 'linux'
      GOARCH: 'amd64'
 
jobs: 
  - job: BuildTestBackend
    displayName: 'Build and Test Go Backend'
    pool:
      vmImage: 'Ubuntu 18.04'
    steps:
      - task: GoTool@0
    input: 
      version: $(GOVERSION)
      displayName: 'Install and select Go Version $(GOVERSION)'
  - script:
          go get -u github.com/jstemmer/go-junit-report 2>&1
          go get -u github.com/axw/gocov/gocov 2>&1
          go get -u github.com/AlekSi/gocov-xml 2>&1

        go test ./serviantestapp -v -coverprofile=demo-coverage.txt -covermode count 2>&1 | $HOME/go/bin/go-junit-report 
        rc=${PIPESTATUS[0]}
        $HOME/go/bin/gocov convert demo-coverage.txt > demo-coverage.json
        $HOME/go/bin/gocov-xml < demo-coverage.json > demo-coverage.xml

        if [ rc -ne 0]; then
          >&2 echo "Tests Failed"
        fi
      displayName: 'Run Unit tests and convert results'
      failonStderr: true

  - task: $Go@0
    inputs:
      command: 'build'
      arguments: '-a -o serviantestchallenge'
      displayName: 'Build Go App'
  - publish: '$(Build.Source.Directory)/demo'
    artifact: 'Executable'
    displayName: 'Publish Pipeline Artifact'

  - task: PublishTestResults@2
    condition: always()
    inputs:
        testResultsFormat: 'JUnit'
        testResultsFile: '*report*.xml'
        searchFolder: '$(Build.SourceDirectory)'
    displayName: 'Publish Test Results'

  - task: PublishCodeCoverageResults@1
    condition: always()
    inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourceDirectory)/demo-coverage.xml'
          displayName: 'Publish Code Coverage Results'